<html>
<head>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-140485405-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-140485405-1');
</script>



    <meta http-equiv="Content-Security-Policy" content="script-src 'self' 'unsafe-inline' 'unsafe-eval' *; "/>
    
	  <title>Bike Sharing Predictions</title>
	  	<link rel="stylesheet" href="../resources/styles-map.css">

		<meta name="description" content="Bike Sharing Predictions">
	<style>

	</style>

	<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js"></script>

	    <meta charset="utf-8">
    	<meta name="viewport" content="width=device-width, initial-scale=1.0">
    	
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css" integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA==" crossorigin="">
        <script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js" integrity="sha512-QVftwZFqvtRNi0ZyCtsznlKSWOStnDORoefr1enyq5mVL4tmKB3S/EnC3rRJcxCPavG10IcrVGSmPh6Qw5lwrg==" crossorigin=""></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/octicons/3.5.0/octicons.min.css">
    
    <script>

      var chartOptions = {
          legend: {
            display: true,
            position: 'top',
            labels: {
              boxWidth: 10
            }
          },
          scales: {
			yAxes: [{
			ticks: {
			min: 0,
			}
        }]
    }
        }
    
	var mymap = undefined;
	
	var LamMarker = [];
    
    var myLineChart = undefined;
    	
	var jsonFeed = {};
	
    function onClick(e) {
    
    
    	var myUrl = window.location;
        
        mymap.setView([e.latlng.lat, e.latlng.lng]);
        
        var canvas = document.getElementById("myChart");
        var map = document.getElementById("mapid");
        map.style.height = "100%";
        map.style.display = "block";
        var parent = document.getElementById('wrapper');
        parent.style.display = "block";
        canvas.width = parent.offsetWidth;
        canvas.height = parent.offsetHeight;
        var popup = e.target.getPopup();
        var content = popup.getContent().replace(/(^\d\d-)/g, '');
        
        var currentStation = content;
        
        if (currentCity !== 'bilbao') {
        	currentStation = data[content]['id']
        }

        console.log("Selected " + currentStation)
        
        var urlio =  myUrl.protocol + "//" + myUrl.hostname + ":" + myUrl.port +   "/api/v1/prediction/" + currentCity + "/" + encodeURIComponent(currentStation)
        var urlioToday =  myUrl.protocol + "//" + myUrl.hostname + ":" + myUrl.port +   "/api/v1/today/" + currentCity + "/" + encodeURIComponent(currentStation)

        var maURL =  myUrl.protocol + "//" + myUrl.hostname + ":" + myUrl.port +   "/api/v1/all/" + currentCity + "/" + encodeURIComponent(currentStation)

        fetch(maURL)
    .then(function(response) {
      return response.json();
    })
    .then(function(result) {
      console.log(result['values'])

		const prediction = result['values']['prediction']
		const actual = allResponses[1]['values']['today']
    });
        
		Promise.all([
		  fetch(urlio).then(response => response.json()),
		  fetch(urlioToday).then(response => response.json())
		]).then(allResponses => {
		console.log(allResponses)
			const prediction = allResponses[0]['values']
			const actual = allResponses[1]['values']

			console.log(prediction)
			console.log(actual)

			var indexes = Object.keys(prediction)
			actual_values = Object.values(actual)		
			prediction_values = Object.values(prediction)
		
			error = [];	

			for(var i = 0;i<=actual_values.length-1;i++){
				error.push(actual_values[i] - prediction_values[i]);
			}
		
			let ctx = document.getElementById('myChart').getContext('2d');
			myLineChart.destroy();
			
			var datitos = {
            labels: indexes,
				datasets: [
				{
					label:"Prediction",
					data: prediction_values,
					backgroundColor: 'rgba(0, 0, 0, 0.1)',
					borderColor: 'rgba(0, 0, 0, 0.1)',
					borderDash: [5, 5],
					pointStyle: 'line',
					fill: true,
					pointRadius: 0
				},
				{
					label: "Now",
					data: actual_values,
					backgroundColor: 'rgba(139,157,195, 0.8)',
					borderColor: 'rgba(139,157,195, 0.8)',
					pointStyle: 'line',
					fill: true,
					pointRadius: 0
				}
				]
			}
		
			myLineChart = new Chart(ctx, {
				responsive: true,
				maintainAspectRatio: false,
				type: 'line',
				data: datitos,
				options: chartOptions
			});
		})
    }
    
	function init() {
	
		loadMapPins()
		dict = <%- JSON.stringify(dict) %>;
	}
	
	function showMap(position) {
      // Show a map centered at position

		latitude = position.coords.latitude;
		longitude = position.coords.longitude;

		mymap.setView([latitude, longitude], 17);

    }
    
    const availabilityPinColors = {'high': '#34c759', 'medium': '#ff9500', 'low': '#ff3b30'}
    
    function loadMapPins() {
    
    	console.log("Hey! Thanks for using Neural Bikes, if you consider this useful contribute donating money to cover the development and server costs. Thanks, @javierdemartin")
    
    	 navigator.geolocation.getCurrentPosition(showMap);
    
    	var canvas = document.getElementById("myChart");

        var map = document.getElementById("mapid");
        map.style.height = "100%";
        map.style.display = "block";

        var parent = document.getElementById('wrapper');

        canvas.width = parent.offsetWidth;
        canvas.height = parent.offsetHeight;
    
	    let ctx = document.getElementById('myChart').getContext('2d');
	    
	    myLineChart = new Chart(ctx, {
            responsive: true,
            maintainAspectRatio: false,
            type: 'line',
            data: [],
            options: chartOptions
        });

        var lat  = "<%= lat %>"; // Where to center the map
        var lng  = "<%= lng %>";
        var zoom = "<%= zoom %>";
        var city = "<%= city %>";
        data       = <%- JSON.stringify(data) %>;
        
        currentCity = city;
        
        var prediction = <%- JSON.stringify(prediction) %>;
        var actual     = <%- JSON.stringify(actual) %>;
        
        console.log(prediction)

        mymap = L.map('mapid').setView([lat, lng], zoom);

      	L.tileLayer(
                "https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",
                {detectRetina: true,
                maxZoom: L.Browser.retina ? 12 : 11,
				  maxNativeZoom: L.Browser.retina ? 10 : 11, // 1 level LOWER for high pixel ratio device.
                "attribution": "\u0026copy; \u003ca href=\"http://www.openstreetmap.org/copyright\"\u003eOpenStreetMap\u003c/a\u003e contributors \u0026copy; \u003ca href=\"http://cartodb.com/attributions\"\u003eCartoDB\u003c/a\u003e, CartoDB \u003ca href =\"http://cartodb.com/attributions\"\u003eattributions\u003c/a\u003e", "detectRetina": false, "maxNativeZoom": 18, "maxZoom": 18, "minZoom": 0, "noWrap": false, "opacity": 1, "subdomains": "abc", "tms": false}
            ).addTo(mymap);

		Object.keys(data).forEach(function(stationName) {
			
			var lat  = data[stationName]['lat']
            var lng  = data[stationName]['lng']
            var name = stationName
			
			const stationAvailability = (data[stationName]['free_bikes'] / data[stationName]['total_docks']) * 100.0;
			
			var color = "#3395DE"
			
			switch(true) {
				case (stationAvailability > 66.66):
					color = availabilityPinColors['high']
					break;
				case (stationAvailability < 66.66 && stationAvailability > 33.33):
					color = availabilityPinColors['medium']
					break;
				case (stationAvailability < 33.33):
					color = availabilityPinColors['low']
					break;
			}

            var popup = L.popup({"maxWidth": "100%", closeOnClick: true,
                 autoClose: true
             }).setContent(name.replace(/(^\d\d-)/g, ""));
            
            var marker = new L.circleMarker([lat, lng],
                {"bubblingMouseEvents": true, "color": color, "dashArray": null, "dashOffset": null, "fill": true, "fillColor": color, "fillOpacity": 0.5, "fillRule": "evenodd", "lineCap": "round", "lineJoin": "round", "opacity": 1.0, "radius": 8, "stroke": true, "weight": 3}
            )
            
            LamMarker.push(marker);
            
			marker.addTo(mymap).bindPopup(popup).on('click', onClick);
		})
    }
    
    var currentCity = ""
    </script>

</head>
<body onload="init()">    

    <div class="container">
		

		<div class="segmented_control_wrapper">
			<script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'></script><script type='text/javascript'>kofiwidget2.init('Support Me!', '#29abe0', 'H2H814TXG');kofiwidget2.draw();</script> 
		</div>

		<div id="mapid" class="leaflet-container leaflet-retina leaflet-safari leaflet-fade-anim leaflet-grab leaflet-touch-drag" tabindex="0"></div>

		

		<div class="wrapper" id="wrapper" >
			<canvas id="myChart"></canvas>
		</div>
    </div>
</body>
</html>